datasource db {
    provider = "postgresql"
    url      = env("RESTAURANT_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "./../../prisma-clients/restaurant"
}

enum FoodType {
    VEG
    NON_VEG
    VEGAN
}

enum FoodStatus {
    IN_STOCK
    OUT_OF_STOCK
    DRAFT
    ARCHIVED
}

enum UserRole {
    ADMIN
    STAFF
    SUPER_ADMIN
}

model User {
    id          String   @id @default(cuid())
    displayName String?
    email       String   @unique
    photoUrl    String?
    disabled    Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    role        UserRole
}

model Customer {
    id          String   @id @default(cuid())
    displayName String?
    email       String   @unique
    photoUrl    String?
    disabled    Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Category {
    id             String         @id @default(cuid())
    name           String
    foods          Food[]
    menuCategories MenuCategory[]
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model Food {
    id             String              @id @default(cuid())
    categoryId     String
    category       Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    name           String
    description    String?
    photoUrl       String?
    status         FoodStatus          @default(DRAFT)
    foodType       FoodType
    customizations FoodCustomization[]
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
    orderItems     OrderItem[]
}

model FoodCustomization {
    id                      String                   @id @default(cuid())
    foodId                  String
    food                    Food                     @relation(fields: [foodId], references: [id], onDelete: Cascade)
    name                    String
    costPrice               Float
    sellingPrice            Float
    isDefault               Boolean                  @default(false)
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    orderItemCustomizations OrderItemCustomization[]
}

model Order {
    id         String      @id @default(cuid())
    userId     String?
    customerId String?
    table      String?
    total      Float
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    items      OrderItem[]
}

model OrderItem {
    id             String                   @id @default(cuid())
    orderId        String
    order          Order                    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    foodId         String
    food           Food                     @relation(fields: [foodId], references: [id], onDelete: Cascade)
    quantity       Int
    total          Float
    customizations OrderItemCustomization[]
}

model OrderItemCustomization {
    id              String            @id @default(cuid())
    orderItemId     String
    orderItem       OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
    customizationId String
    customization   FoodCustomization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
}

model Menu {
    id             String         @id @default(cuid())
    name           String
    menuCategories MenuCategory[]
    active         Boolean        @default(false)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model MenuCategory {
    id         String   @id @default(cuid())
    menuId     String
    menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    menuOrder  Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([menuId, categoryId, menuOrder])
}
